(module

 (import "pairs" "dealloc-pair"      (func $dealloc-pair     (param i32)))
 (import "pairs" "get-pair-car"      (func $get-pair-car     (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr"      (func $get-pair-cdr     (param i32)     (result i32)))
 (import "pairs" "make-pair"         (func $make-pair        (param i32 i32) (result i32)))
 (import "pairs" "set-pair-car"      (func $set-pair-car     (param i32 i32)))
 (import "pairs" "set-pair-cdr"      (func $set-pair-cdr     (param i32 i32)))
 (import "values" "align-value-size" (func $align-value-size (param i32)     (result i32)))
 (import "values" "get-value-tag"    (func $get-value-tag    (param i32)     (result i32)))

 (memory (debug (export "memory")) 1)

 (include "./globals.wam")

 ;; Management

 (global $blocks-top       (export "blocks-top")       (mut i32) (i32.const 0xffffffff))
 (global $block-count      (export "block-count")      (mut i32) (i32.const 0x00000000))
 (global $blocks-free-area (export "blocks-free-area") (mut i32) (i32.const 0x00000000))
 (global $block-free-list  (export "block-free-list")  (mut i32) (i32.const 0))

 ;; Block structure offsets

 (global $block-owner       (export "block-owner")       i32 (i32.const 0x0000))
 (global $block-data-size   (export "block-data-size")   i32 (i32.const 0x0004))

 ;; Size of block header
 (global $block-header-size (export "block-header-size") i32 (i32.const 0x0008))


 ;;-----------------------------------------------------------------------------
 ;;
 ;; Initialization
 ;;

 (func $init-blocks (export "init-blocks")
   (global.set $blocks-top (i32.shl (memory.size) (global.get $page-size-bits)))
   (global.set $block-count (i32.const 0))
   (global.set $blocks-free-area (i32.const 0))
   (global.set $block-free-list (global.get $null)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Management Accessors
 ;;

 (func $get-blocks-top (export "get-blocks-top")
   (result i32)
   (global.get $blocks-top))

 (func $get-block-count (export "get-block-count")
   (result i32)
   (global.get $block-count))

 (func $get-blocks-free-area (export "get-blocks-free-area")
   (result i32)
   (global.get $blocks-free-area))

 (func $get-block-free-list (export "get-block-free-list")
   (result i32)
   (global.get $block-free-list))

 (func $set-blocks-top (export "set-blocks-top")
   (param $top i32)
   (global.set $blocks-top (local.get $top)) )

 (func $set-block-count (export "set-block-count")
   (param $block-count i32)
   (global.set $block-count (local.get $block-count)))

 (func $set-blocks-free-area (export "set-blocks-free-area")
   (param $free-area i32)
   (global.set $blocks-free-area (local.get $free-area)))

 (func $set-block-free-list (export "set-block-free-list")
   (param $free-list i32)
   (global.set $blocks-free-list (local.get $free-list)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Management Utilities
 ;;

 (func $decr-block-count (export "decr-block-count")
   (call $set-block-count (i32.sub (call $get-block-count)
                                   (i32.const 1))))

 (func $incr-block-count (export "incr-block-count")
   (call $set-block-count (i32.add (call $get-block-count)
                                   (i32.const 1))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Block Accessors
 ;;

 (func $get-block-owner (export "get-block-owner")
   (param $block i32)
   (result i32)
   (i32.load (i32.add (local.get $block)
                      (global.get $block-owner))))

 (func $get-block-data-size (export "get-block-data-size")
   (param $block i32)
   (result i32)
   (i32.load (i32.add (local.get $block)
                      (global.get $block-data-size))))

 (func $set-block-owner (export "set-block-owner")
   (param $block i32)
   (param $owner i32)
   (i32.store (i32.add (local.get $block)
                       (global.get $block-owner))
              (local.get $owner)))

 (func $set-block-data-size (export "set-block-data-size")
   (param $block i32)
   (param $size i32)
   (i32.store (i32.add (local.get $block)
                       (global.get $block-data-size))
              (local.get $size)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Block Utilities
 ;;

 (func $calc-block-size (export "calc-block-size")
   (param $size i32)
   (result i32)
   (i32.add (global.get $block-header-size)
            (call $align-value-size (local.get $size))))

 (func $get-block-size (export "get-block-size")
   (param $block i32)
   (result i32)
   (call $calc-block-size (call $get-block-data-size (local.get $block))))

 (func $get-next-block (export "get-next-block")
   (param $block i32)
   (result i32)
   (i32.add (local.get $block)
            (call $get-block-size (local.get $block))))

 (func $is-free-block (export "is-free-block")
   (param $block i32)
   (result i32)
   (i32.eq (call $get-block-owner (local.get $block)) (global.get $null)))

 (func $make-free-block (export "make-free-block")
   (param $block i32)
   (param $size i32)

   (call $set-block-owner  (local.get $block) (global.get $null))
   (call $set-block-data-size (local.get $block) (call $align-value-size (local.get $size))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Allocation
 ;;

 (func $alloc-block (export "alloc-block")
   (param $owner i32)
   (param $n i32)
   (result i32)

   (local $new-block i32)

   (if (i32.eqz (local.get $n))
       (then (return (global.get $null))))

   (local.set $new-block (call $alloc-exact-free-list-block
                               (local.get $owner)
                               (local.get $n)))

   (if (i32.ne (local.get $new-block) (global.get $null))
       (then
        (return (local.get $new-block))))

   (local.set $new-block (call $alloc-split-free-list-block
                               (local.get $owner)
                               (local.get $n)))

   (if (i32.ne (local.get $new-block) (global.get $null))
       (then
        (return (local.get $new-block))))

   (call $alloc-end-block
         (local.get $owner)
         (local.get $n)))

 (func $alloc-exact-free-list-block (export "alloc-exact-free-list-block")
   (param $owner i32)
   (param $data-size i32)
   (result i32)

   (local $aligned-size i32)
   (local $free-block i32)
   (local $head i32)
   (local $new-block i32)
   (local $next i32)

   (local.set $aligned-size (call $align-value-size (local.get $data-size)))

   (local.set $head (call $get-block-free-list))
   (local.set $new-block (global.get $null))

   (if (i32.ne (local.get $head) (global.get $null))
       (then
        (local.set $free-block (call $get-pair-car (local.get $head)))
        (if (i32.eq (call $get-block-data-size (local.get $free-block))
                    (local.get $aligned-size))
            (then
             (call $set-block-free-list (call $get-pair-cdr (local.get $head)))
             (local.set $new-block (local.get $free-block))
             (call $set-block-owner (local.get $new-block) (local.get $owner)))
          (else
           (loop $again
             (local.set $next (call $get-pair-cdr (local.get $head)))
             (if (i32.ne (local.get $next) (global.get $null))
                 (then
                  (local.set $free-block (call $get-pair-car (local.get $next)))
                  (if (i32.eq (call $get-block-data-size (local.get $free-block))
                              (local.get $aligned-size))
                      (then
                       (call $set-pair-cdr (local.get $head) (call $get-pair-cdr (local.get $next)))
                       (local.set $new-block (local.get $free-block))
                       (call $set-block-owner (local.get $new-block) (local.get $owner))
                       (call $set-block-data-size (local.get $new-block) (local.get $data-size)))
                    (else
                     (local.set $head (local.get $next))
                     (br $again))))))))))

   (local.get $new-block))

 (func $alloc-split-free-list-block (export "alloc-split-free-list-block")
   (param $owner i32)
   (param $data-size i32)
   (result i32)

   (local $aligned-size i32)
   (local $free-block i32)
   (local $head i32)
   (local $new-block i32)

   (local.set $aligned-size (call $align-value-size (local.get $data-size)))

   (local.set $head (call $get-block-free-list))
   (local.set $new-block (global.get $null))

   (loop $again
     (if (i32.ne (local.get $head) (global.get $null))
         (then
          (local.set $free-block (call $get-pair-car (local.get $head)))
          (if (call $can-split-free-block (local.get $free-block) (local.get $aligned-size))
              (then
               (call $set-pair-car
                     (local.get $head)
                     (call $split-free-block (local.get $free-block) (local.get $aligned-size)))

               (local.set $new-block (local.get $free-block))
               (call $set-block-owner (local.get $new-block) (local.get $owner))
               (call $set-block-data-size (local.get $new-block) (local.get $data-size)))
            (else
             (local.set $head (call $get-pair-cdr (local.get $head)))
             (br $again))))))

   (local.get $new-block))

 (func $can-split-free-block (export "can-split-free-block")
   (param $free-block i32)
   (param $split-size i32)
   (result i32)

   (local $size i32)
   (local.set $size (call $get-block-data-size (local.get $free-block)))

   (i32.ge_u (local.get $size)
              (i32.add (local.get $split-size)
                       (global.get $block-header-size))))

 (func $split-free-block (export "split-free-block")
   (param $free-block i32)
   (param $split-size i32)
   (result i32)

   (local $new-block i32)
   (local $new-block-size i32)

   (local.set $new-block-size
              (i32.sub
               (i32.sub (call $get-block-data-size (local.get $free-block))
                        (local.get $split-size))
               (global.get $block-header-size)))

   (call $set-block-data-size (local.get $free-block) (local.get $split-size))
   (local.set $new-block (call $get-next-block (local.get $free-block)))

   (call $make-free-block
         (local.get $new-block)
         (local.get $new-block-size))

   (call $incr-block-count)
   (local.get $new-block))

 (func $alloc-end-block (export "alloc-end-block")
   (param $owner i32)
   (param $data-size i32)
   (result i32)

   (local $new-block i32)

   (local.set $new-block (call $get-blocks-free-area))

   (call $ensure-blocks-alloc-top
         (i32.add (local.get $new-block)
                  (call $calc-block-size (local.get $data-size))))

   (call $set-block-owner
         (local.get $new-block)
         (local.get $owner))

   (call $set-block-data-size
         (local.get $new-block)
         (local.get $data-size))

   (call $set-blocks-free-area (call $get-next-block (local.get $new-block)))

   (call $incr-block-count)

   (local.get $new-block))

 (func $ensure-blocks-alloc-top (export "ensure-blocks-alloc-top")
   (param $alloc-top i32)

   (local $memory-size i32)
   (local $size i32)
   (local $size-required i32)
   (local $top i32)

   (local.set $top (call $get-blocks-top))

   (if (i32.gt_u (local.get $alloc-top) (local.get $top))
       (then
        (local.set $size (memory.size))
        (local.set $size-required (i32.add (i32.shr_u (i32.sub (local.get $alloc-top)
                                                               (i32.const 1))
                                                      (global.get $page-size-bits))
                                           (i32.const 1)))

        (if (i32.gt_u (local.get $size-required) (local.get $size))
            (then
             (drop (memory.grow (i32.sub (local.get $size-required) (local.get $size))))))

        (call $set-blocks-top (i32.shl (local.get $size-required)
                                       (global.get $page-size-bits))))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Deallocation
 ;;

 (func $dealloc-block (export "dealloc-block")
   (param $block i32)

   (call $add-free-block (local.get $block))
   (call $compact-block-free-list)
   (call $step-defragment-free-blocks))

 (func $add-free-block (export "add-free-block")
   (param $block i32)

   (local $head i32)
   (local $next i32)

   (local.set $head (call $get-block-free-list))

   (if (i32.eq (local.get $head) (global.get $null))
       (then
        (call $set-block-free-list
              (call $make-pair (local.get $block) (global.get $null))))
     (else
      (loop $again
        (local.set $next (call $get-pair-cdr (local.get $head)))
        (if (i32.ne (global.get $null) (global.get $null))
            (then
             (if (i32.gt_u (local.get $block) (call $get-pair-car (local.get $next)))
                 (then
                  (local.set $head (local.get $next))
                  (br $again))))))

      (call $set-pair-cdr
            (local.get $head)
            (call $make-pair (local.get $block) (local.get $next))))))

 (func $compact-block-free-list (export "compact-block-free-list")
   (call $join-adjacent-free-blocks)
   (call $drop-free-block-at-end))

 (func $join-adjacent-free-blocks (export "join-adjacent-free-blocks")
   (local $block i32)
   (local $head i32)
   (local $next i32)
   (local $next-block i32)

   (local.set $head (call $get-block-free-list))

   (if (i32.ne (local.get $head) (global.get $null))
       (then
        (local.set $block (call $get-pair-car (local.get $head)))
        (loop $again
          (local.set $next (call $get-pair-cdr (local.get $head)))
          (if (i32.ne (local.get $next) (global.get $null))
              (then
               (local.set $next-block (call $get-pair-car (local.get $next)))
               (if (i32.eq (local.get $next-block)
                           (call $get-next-block (local.get $block)))
                   (then
                    (call $set-block-data-size
                          (local.get $block)
                          (i32.add (call $get-block-data-size (local.get $block))
                                   (i32.add (call $get-block-data-size (local.get $next-block))
                                            (global.get $block-header-size))))
                    (call $decr-block-count)
                    (call $set-pair-cdr (local.get $head) (call $get-pair-cdr (local.get $next)))
                    (call $dealloc-pair (local.get $next))
                    (br $again))

                 (else
                  (local.set $head (local.get $next))
                  (local.set $block (local.get $next-block))))))))))

 (func $drop-free-block-at-end (export "drop-free-block-at-end")

   (local $block i32)
   (local $head i32)
   (local $next i32)
   (local $prev i32)

   (local.set $head (call $get-block-free-list))
   (local.set $prev (global.get $null))

   (if (i32.ne (local.get $head) (global.get $null))
       (then
        (loop $again
          (local.set $next (call $get-pair-cdr (local.get $head)))
          (if (i32.ne (local.get $next) (global.get $null))
              (then
               (local.set $prev (local.get $head))
               (local.set $head (local.get $next))
               (br $again))))

        (local.set $block (call $get-pair-car (local.get $head)))
        (if (i32.eq (call $get-next-block (local.get $block))
                    (call $get-blocks-free-area))
            (then
             (if (i32.eq (local.get $prev) (global.get $null))
                 (then
                  (call $set-block-free-list (global.get $null)))
               (else
                (call $set-pair-car (local.get $prev) (global.get $null))))
             (call $set-blocks-free-area (local.get $block))
             (call $dealloc-pair (local.get $head))
             (call $decr-block-count))))))

 (func $step-defragment-free-blocks (export "step-defragment-free-blocks")

   (local $block i32)
   (local $block-dest i32)
   (local $head i32)
   (local $free-block i32)
   (local $free-block-data-size i32)

   (local.set $head (call $get-block-free-list))

   (if (i32.ne (local.get $head) (global.get $null))
       (then
        (local.set $free-block (call $get-pair-car (local.get $head)))
        (local.set $free-block-data-size (call $get-block-data-size (local.get $free-block)))
        (local.set $block (call $get-next-block (local.get $free-block)))
        (local.set $block-dest (local.get $free-block))

        (memory.copy (local.get $block-dest)
                     (local.get $block)
                     (call $get-block-size (local.get $block)))

        (call $set-pair-cdr
              (call $get-block-owner (local.get $block))
              (local.get $block))

        (local.set $free-block (call $get-next-block (local.get $block-dest)))

        (call $make-free-block
              (local.get $free-block)
              (local.get $free-block-data-size))

        (call $set-pair-car
              (local.get $head)
              (local.get $free-block))

        (call $compact-block-free-list)))))
