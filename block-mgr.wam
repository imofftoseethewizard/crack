(module

 (import "pairs" "dealloc-pair"      (func $dealloc-pair     (param i32)))
 (import "pairs" "get-pair-car"      (func $get-pair-car     (param i32)     (result i32)))
 (import "pairs" "get-pair-cdr"      (func $get-pair-cdr     (param i32)     (result i32)))
 (import "pairs" "make-pair"         (func $make-pair        (param i32 i32) (result i32)))
 (import "pairs" "set-pair-car"      (func $set-pair-car     (param i32 i32)))
 (import "pairs" "set-pair-cdr"      (func $set-pair-cdr     (param i32 i32)))
 (import "values" "get-value-tag"    (func $get-value-tag    (param i32)     (result i32)))

 (include "./globals.wam")

 ;; TODO add sigs
 (table $memory-copy (export "memory-copy") 2 funcref)
 (table $memory-grow (export "memory-grow") 2 funcref)
 (table $memory-size (export "memory-size") 2 funcref)

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Initialization
 ;;

 (func $make-block-mgr (export "make-block-mgr")
   (param i32 $service-id)
   (result i32)

   (call $make-pair
         (call $make-pair
               (call $make-pair
                     (local.get $service-id)
                     (call $make-pair
                           (global.get $null)   ;; end
                           (global.get $null))) ;; defrag cursor
               (call $make-pair
                     (i32.const 0)              ;; free-area
                     (i32.cosnt 0)))            ;; top
         (call $make-pair
               (call $make-pair
                     (global.get $null)         ;; block-list
                     (i32.const 0))             ;; block-count
               (call $make-pair
                     (global.get $null)         ;; free-list
                     (i32.const 0)))))          ;; free-count

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Blockset Accessors
 ;;

 ;; extant: block list, free area, free list, top, end
 ;; TODO add service id, block count, free block count, defrag cursor
 ;; 9 properties -> 7 of cxxxr plus 2 of cxxxx
 r
 (func $get-block-list (export "get-block-list")
   (param $blockset i32)
   (result i32)
   (call $get-pair-car (local.get $blockset)))

 (func $get-blockset-free-area (export "get-blockset-free-area")
   (param $blockset i32)
   (result i32)
   (call $get-pair-cddar (local.get $blockset)))

 (func $get-block-free-list (export "get-block-free-list")
   (param $blockset i32)
   (result i32)
   (call $get-pair-cdar (local.get $blockset)))

 (func $get-blockset-top (export "get-blockset-top")
   (param $blockset i32)
   (result i32)
   (call $get-pair-cdddr (local.get $blockset)))

 (func $set-block-list (export "get-block-list")
   (param $blockset i32)
   (param $block-list i32)
   (result i32)
   (call $set-pair-car (local.get $blockset) (local.get $block-list)))

 (func $set-blockset-free-area (export "set-blockset-free-area")
   (param $blockset i32)
   (param $free-area i32)
   (call $set-pair-cddar (local.get $blockset) (local.get $free-area)))

 (func $set-block-free-list (export "set-block-free-list")
   (param $blockset i32)
   (param $free-list i32)
   (call $set-pair-cdar (local.get $blockset) (local.get $free-list)))

 (func $set-blockset-top (export "set-blockset-top")
   (param $blockset i32)
   (param $top i32)
   (call $set-pair-cdddr (local.get $blockset) (local.get $top)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Block Accessors
 ;;

 (func $get-block-addr (export "get-block-addr")
   (param $block i32)
   (result i32)
   (call $get-pair-car (local.get $block)))

 (func $get-block-size (export "get-block-size")
   (param $block i32)
   (result i32)
   (call $get-pair-cdr (local.get $block)))

 (func $set-block-addr (export "set-block-addr")
   (param $block i32)
   (param $addr i32)
   (call $get-pair-car (local.get $block) (local.get $addr)))

 (func $set-block-size (export "set-block-size")
   (param $block i32)
   (param $size i32)
   (call $set-pair-cdr (local.get $block) (local.get $size)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Block Utilities
 ;;

 (func $get-next-block-addr (export "get-next-block-addr")
   (param $block i32)
   (result i32)
   (i32.add (call $get-block-addr (local.get $block))
            (call $get-block-size (local.get $block))))

 (func $make-block (export "make-block")
   (param $addr i32)
   (param $length i32)
   (call $make-pair (local.get $addr) (local.get $length)))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Allocation
 ;;

 (func $alloc-block (export "alloc-block")
   (param $blockset i32)
   (param $n i32)
   (result i32)

   (local $new-block-ref i32)

   (local.set $new-block-ref (call $alloc-exact-free-list-block
                                   (local.get $blockset)
                                   (local.get $n)))

   (if (i32.eq (local.get $new-block-ref) (global.get $null))
       (then
        (local.set $new-block-ref (call $alloc-split-free-list-block
                                        (local.get $blockset)
                                        (local.get $n)))

        (if (i32.eq (local.get $new-block-ref) (global.get $null))
            (then
             (call $alloc-end-block
                   (local.get $blockset)
                   (local.get $n))))))

   (local.get $new-block))

 (func $alloc-exact-free-list-block (export "alloc-exact-free-list-block")
   (param $blockset i32)
   (param $data-size i32)
   (result i32)

   (local $free-block-ref i32)
   (local $head i32)
   (local $new-block-ref i32)
   (local $next i32)

   (local.set $head (call $get-block-free-list (local.get $blockset)))
   (local.set $new-block-ref (global.get $null))

   (if (i32.ne (local.get $head) (global.get $null))
       (then
        (local.set $free-block-ref (call $get-pair-car (local.get $head)))
        (if (i32.eq (call $get-block-size (call $get-pair-car (local.get $free-block-ref)))
                    (local.get $data-size))
            (then
             (call $set-block-free-list
                   (local.get $blockset)
                   (call $get-pair-cdr (local.get $head)))
             (call $decr-free-block-count (local.get $blockset))
             (local.set $new-block-ref (local.get $free-block-ref)))
          (else
           (loop $again
             (local.set $next (call $get-pair-cdr (local.get $head)))
             (if (i32.ne (local.get $next) (global.get $null))
                 (then
                  (local.set $free-block-ref (call $get-pair-car (local.get $next)))
                  (if (i32.eq (call $get-block-size (call $get-pair-car
                                                          (local.get $free-block-ref)))
                              (local.get $data-size))
                      (then
                       (call $set-pair-cdr (local.get $head) (call $get-pair-cdr
                                                                   (local.get $next)))
                       (call $decr-free-block-count (local.get $blockset))
                       (local.set $new-block-ref (local.get $free-block-ref)))
                    (else
                     (local.set $head (local.get $next))
                     (br $again))))))))))

   (local.get $new-block-ref))

 (func $alloc-split-free-list-block (export "alloc-split-free-list-block")
   (param $blockset i32)
   (param $data-size i32)
   (result i32)

   (local $free-block i32)
   (local $head i32)
   (local $new-block i32)
   (local $size i32)

   (local.set $head (call $get-block-free-list (local.get $blockset)))
   (local.set $new-block (global.get $null))

   (loop $again
     (if (i32.ne (local.get $head) (global.get $null))
         (then
          (local.set $free-block-ref (call $get-pair-car (local.get $head)))
          (local.set $size (call $get-block-size (call $get-pair-car
                                                       (local.get $free-block-ref))))
          (if (i32.gt_u (local.get $size) (local.get $data-size))
              (then
               (call $incr-block-count (local.get $blockset))
               (local.set $new-block-ref
                          (call $split-free-block
                                (local.get $free-block-ref)
                                (local.get $data-size))))
            (else
             (local.set $head (call $get-pair-cdr (local.get $head)))
             (br $again))))))

   (local.get $new-block-ref))

 (func $split-free-block (export "split-free-block")
   (param $free-block-ref i32)
   (param $new-block-size i32)
   (result i32)

   (local $free-block i32)
   (local $new-block i32)
   (local $new-block-ref i32)

   (local.set $free-block (call $get-pair-car (local.get $free-block-ref)))

   (local.set $remainder-size
              (i32.sub (call $get-block-size (local.get $free-block))
                       (local.get $new-block-size)))

   (call $set-block-size (local.get $free-block) (local.get $remainder-size))

   (local.set $new-block (call $make-block
                               (i32.add (call $get-free-block-addr (local.get $free-block))
                                        (local.get $remainder-size))
                               (local.get $new-block-size)))

   (local.set $new-block-ref (call $make-pair
                                   (local.get $new-block)
                                   (call $get-pair-cdr (local.get $free-block-ref))))

   (call $set-pair-cdr (local.get $free-block-ref) (local.get $new-block-ref))

   (local.get $new-block-ref))

 (func $alloc-end-block (export "alloc-end-block")
   (param $blockset i32)
   (param $data-size i32)
   (result i32)

   (local $new-block i32)
   (local $new-block-addr i32)
   (local $new-block-end i32)
   (local $new-block-ref i32)

   (local.set $new-block-addr (call $get-blockset-free-area (local.get $blockset)))
   (local.set $new-block-end (i32.add (local.get $new-block-addr)
                                      (local.get $data-size)))

   (call $incr-block-count (local.get $blockset))

   (local.set $new-block (call $make-block
                               (local.get $new-block-addr)
                               (local.get $data-size)))

   (local.set $new-block-ref (call $make-pair
                                   (local.get $new-block)
                                   (global.get $null)))

   (call $set-pair-cdr
         (call $get-block-list-end (local.get $blockset))
         (local.get $new-block-ref))

   (call $set-block-list-end (local.get $blockset) (local.get $new-block-ref))

   (call $ensure-blockset-alloc-top (local.get $new-block-end))

   (call $set-blockset-free-area (local.get $blockset) (local.get $new-block-end))

   (local.get $new-block-ref))

 (func $ensure-blockset-alloc-top (export "ensure-blockset-alloc-top")
   (param $blockset i32)
   (param $required-top i32)

   (local $memory-size i32)
   (local $service-id i32)
   (local $size i32)
   (local $size-required i32)
   (local $top i32)

   (local.set $service-id (call $get-blockset-service-id (local.get $blockset)))
   (local.set $top (call $get-blockset-top (local.get $blockset)))

   (if (i32.gt_u (local.get $required-top) (local.get $top))
       (then
        (local.set $size (call_indirect $memory-size
                                        (type $memory-size-sig)
                                        (local.get $service-id)))

        (local.set $size-required (i32.add (i32.shr_u (i32.sub (local.get $required-top)
                                                               (i32.const 1))
                                                      (global.get $page-size-bits))
                                           (i32.const 1)))

        (call $set-blockset-top
              (local.get $blockset)
              (if (result i32) (i32.gt_u (local.get $size-required) (local.get $size))
                (then
                 (call_indirect $memory-grow
                                (type $memory-grow-sig)
                                (local.get $service-id)
                                (i32.sub (local.get $size-required)
                                         (local.get $size))))
                (else
                 (i32.shl (local.get $size-required)
                          (global.get $page-size-bits))))))))

 ;;-----------------------------------------------------------------------------
 ;;
 ;; Deallocation
 ;;

 (func $dealloc-block (export "dealloc-block")
   (param $blockset i32)
   (param $block-ref i32)

   (call $incr-free-block-count (local.get $blockset))
   (call $add-free-block (local.get $blockset) (local.get $block-ref))
   (call $step-defragment-blocks (local.get $blockset)))

 (func $add-free-block (export "add-free-block")
   (param $blockset i32)
   (param $block-ref i32)

   (local $block i32)
   (local $block-addr i32)
   (local $head i32)
   (local $next i32)

   (local.set $block (call $get-pair-car (local.get $block-ref)))
   (local.set $block-addr (call $get-block-addr (local.get $block)))
   (local.set $head (call $get-block-free-list (local.get $blockset)))

   (if (i32.eq (local.get $head) (global.get $null))
       (then
        (call $set-block-free-list
              (local.get $blockset)
              (call $make-pair (local.get $block-ref) (global.get $null))))
     (else
      (loop $again
        (local.set $next (call $get-pair-cdr (local.get $head)))
        (if (i32.ne (global.get $null) (global.get $null))
            (then
             (if (i32.gt_u (local.get $block-addr)
                           (call $get-block-addr
                                 (call $get-pair-caar (local.get $next))))
                 (then
                  (local.set $head (local.get $next))
                  (br $again))))))

      (call $set-pair-cdr
            (local.get $head)
            (call $make-pair (local.get $block-ref) (local.get $next))))))

 (func $step-defragment-blocks (export "step-defragment-blocks")
   (param $blockset i32)

   (local $block i32)
   (local $block-dest i32)
   (local $head i32)
   (local $free-block i32)
   (local $free-block-size i32)

   (local.set $head (call $get-block-free-list))

   ;; TODO
   (if (i32.ne (local.get $head) (global.get $null))
       (then
        (local.set $free-block (call $get-pair-caar (local.get $head)))
        (local.set $free-block-size (call $get-block-size (local.get $free-block)))
        (local.set $block (call $get-next-block-addr (local.get $free-block)))
        (local.set $block-dest (call $get-block-addr (local.get $free-block)))

        (call_indirect $memory-copy
                       (type $memory-copy-sig)
                       (local.get $service-id)
                       (local.get $block-dest)
                       (local.get $block)
                       (call $get-block-size (local.get $block)))

        (local.set $free-block (call $get-next-block (local.get $block-dest)))

        (call $set-block-addr
              (local.get $block)
              )
        (call $set-block-addr
              (local.get $free-block)
              )

        (call $set-pair)

        (call $compact-block-free-list)))))
