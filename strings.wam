(module

 (import "blocks" "copy-block-i8-range"  (func $copy-block-i8-range  (param i32 i32 i32 i32 i32) (result)))
 (import "blocks" "get-block-element"    (func $get-block-element    (param i32 i32)             (result i32)))
 (import "blocks" "get-block-i8-element" (func $get-block-i8-element (param i32 i32)             (result i32)))
 (import "blocks" "set-block-element"    (func $set-block-element    (param i32 i32 i32)         (result)))
 (import "blocks" "set-block-i8-element" (func $set-block-i8-element (param i32 i32 i32)         (result)))
 (import "boxes" "alloc-boxed-block"     (func $alloc-boxed-block    (param i32 i32)             (result i32)))
 (import "boxes" "get-box-length"        (func $get-box-length       (param i32)                 (result i32)))
 (import "boxes" "get-box-value"         (func $get-box-value        (param i32)                 (result i32)))
 (import "lists" "get-list-length"       (func $get-list-length      (param i32)                 (result i32)))
 (import "pairs" "get-pair-car"          (func $get-pair-car         (param i32)                 (result i32)))
 (import "pairs" "get-pair-cdr"          (func $get-pair-cdr         (param i32)                 (result i32)))
 (import "values" "get-value-tag"        (func $get-value-tag        (param i32)                 (result i32)))

 (include "./globals.wam")

 (func $is-string (export "is-string")
   (param $value i32)
   (result i32)
   (i32.eq (call $get-value-tag (local.get $value)) (global.get $tag-string)))

 (func $alloc-string (export "alloc-string")
   (param $length i32)
   (result i32)
   (call $set-value-tag
         (call $alloc-bytevector (local.get $length))
         (global.get $type-string)))

 (func $dealloc-string (export "dealloc-string")
   (param $s i32)
   (call $dealloc-bytevector (local.get $s)))

 (func $make-string (export "make-string")
   (param $length i32)
   (param $fill-value i32)
   (result i32)

   (local $char-width i32)
   (local.set $char-width ($calc-char-width (local.get $fill-value)))

   (if (result i32) (i32.eq (local.get $char-width) (i32.const 1))
     (then
      (call $set-value-tag
            (call $make-bytevector (local.get $length) (local.get $fill-value))
            (global.get $type-string)))

     (else
      (local.set $s (call $alloc-string
                          (i32.mul (local.get $length)
                                   (local.get $char-width))))
      (if (i32.eq (local.get $char-width) (i32.const 2))
          (then
           (call $fill-block-i16
                 (call $get-box-value $s)
                 (i32.const 0)
                 (local.get $length)
                 (local.get $fill-value)))
        (else
         (if (i32.eq (local.get $char-width) (i32.const 3))
             (then
              (call $fill-block-i24
                    (call $get-box-value $s)
                    (i32.const 0)
                    (local.get $length)
                    (local.get $fill-value)))
           (else
            (call $fill-block-i32
                 (call $get-box-value $s)
                 (i32.const 0)
                 (local.get $length)
                 (local.get $fill-value))))))

      (local.get $s))))

 (func $build-string (export "build-string")
   (param $list)
   (result i32)

   (local $block i32)
   (local $s i32)
   (local $head i32)
   (local $idx i32)
   (local $length i32)

   (local.set $head (local.get $list))
   (local.set $length (i32.const 0))

   (loop $again
     (if (i32.ne (local.get $head) (global.get $null))
         (then
          (local.set $length (i32.add (local.get $length)
                                      (call $calc-char-width
                                            (call $get-pair-car (local.get $head)))))
          (local.set $head (call $get-pair-cdr (local.get $head)))
          (br $again))))

   (local.set $s (call $alloc-string (local.get $length)))

   (local.set $head (local.get $list))
   (local.set $idx (i32.const 0))

   (loop $again
     (if (i32.ne (local.get $head) (global.get $null))
         (then
          (local.set $char (call $get-pair-car (local.get $head)))
          (local.set $width (call $calc-char-width (local.get $char)))
          (call $set-block-bytes
                (local.get $block)
                (local.get $idx)
                (call $encode-char (local.get $char))
                (local.get $width))
          (local.set $idx (i32.add (local.get $idx) (local.get $width)))
          (local.set $head (call $get-pair-cdr (local.get $head)))
          (br $again))))

   (local.get $s))

 (func $get-string-length (export "get-string-length")
   (param $s i32)
   (result i32)

   (local $block i32)
   (local.set $block (call $get-box-value (local.get $s)))

   (call $get-block-element
         (local.get $block)
         (i32.sub (call $get-block-length (local.get $block) (i32.const 1)))))

 (func $get-string-element (export "get-string-element")
   (param $s i32)
   (param $idx i32)
   (result i32)

   (if (result i32) (i32.lt_u (local.get $idx) (call $get-string-length (local.get $s)))
     (then
      (call $get-block-i8-element (local.get $block) (local.get $idx)))
     (else
      (global.get $null))))

 (func $set-string-element (export "set-string-element")
   (param $s i32)
   (param $idx i32)
   (param $byte i32)

   (if (i32.lt_u (local.get $idx) (call $get-string-length (local.get $s)))
     (then
      (call $set-block-i8-element (local.get $block) (local.get $idx) (local.get $byte)))))

 (func $make-string-copy (export "make-string-copy")
   (param $s i32)
   (param $start i32)
   (param $end i32)
   (result i32)

   (local $new-bv i32)

   (local.set $length )

   (local.set $new-bv (call $alloc-string (i32.sub (local.get $end)
                                                       (local.get $start))))
   (call $copy-block-i8-range
         (call $get-box-value (local.get $s))
         (local.get $start)
         (local.get $end)
         (call $get-box-value (local.get $new-bv))
         (i32.const 0))

   (local.get $new-bv))

 (func $can-make-string-copy (export "can-make-string-copy")
   (param $s i32)
   (param $start i32)
   (param $end i32)
   (result i32)

   (local $new-bv i32)

   (i32.and (i32.lt_u (local.get $end) (call $get-string-length (local.get $s)))
            (i32.le_u (local.get $start) (local.get $end))))

 (func $copy-string-range (export "copy-string-range")
   (param $s-to i32)
   (param $at i32)
   (param $s-from i32)
   (param $start i32)
   (param $end i32)

   (call $copy-block-i8-range
         (call $get-box-value (local.get $s-from))
         (local.get $start)
         (local.get $end)
         (call $get-box-value (local.get $s-to))
         (local.get $at)))

 (func $can-copy-string-range (export "can-copy-string-range")
   (param $s-to i32)
   (param $at i32)
   (param $s-from i32)
   (param $start i32)
   (param $end i32)
   (result i32)

   (local $to-length i32)
   (local.set $to-length (call $get-string-length (local.get $to)))

   (i32.and (call $can-make-string-copy
                  (local.get $s-from)
                  (local.get $start)
                  (local.get $end))
            (i32.and (i32.ge_u (local.get $to-length) (local.get $at))
                     (i32.ge_u (i32.sub (local.get $to-length) (local.get $at))
                               (i32.sub (local.get $end) (local.get $start))))))

 (func $append-strings (export "append-strings")
   (param $s-1 i32)
   (param $s-2 i32)
   (result i32)

   (local $s i32)
   (local $length-1 i32)
   (local $length-2 i32)

   (local.set $length-1 (call $get-string-length (local.get $s-1)))
   (local.set $length-2 (call $get-string-length (local.get $s-2)))

   (local.set $s (call $alloc-string
                        (i32.add (local.get $length-1) (local.get $length-2))))

   (call $copy-string-range
         (local.get $s)
         (i32.const 0)
         (local.get $s-1)
         (i32.const 0)
         (local.get $length-1))

   (call $copy-string-range
         (local.get $s)
         (local.get $length-1)
         (local.get $s-2)
         (i32.const 0)
         (local.get $length-2))

   (local.get $s))

 )
