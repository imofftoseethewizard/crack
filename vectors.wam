(module

 (import "blocks" "alloc-block-value"      (func $alloc-block-value      (param i32 i32) (result i32)))
 (import "blocks" "dealloc-block-value"    (func $dealloc-block-value    (param i32)))
 (import "blocks" "get-block-length"       (func $get-block-length       (param i32)     (result i32)))
 (import "blocks" "get-block-value-block"  (func $get-block-value-block  (param i32)     (result i32)))
 (import "blocks" "get-block-value-type"   (func $get-block-value-type   (param i32)     (result i32)))
 (import "values" "get-value-tag"          (func $get-value-tag          (param i32)     (result i32)))

 (include "./globals.wam")
 (include "./gc-client.wam")

 ;;=============================================================================
 ;;
 ;; Vectors
 ;;

 (func $get-vector-length (export "get-vector-length")
   (param $v i32)
   (result i32)
   (call $get-block-length (call $get-block-value-block (local.get $v))))

 (func $is-vector-value (export "is-vector-value")
   (param $value i32)
   (result i32)
   (if (result i32) (i32.eq (call $get-value-tag (local.get $value))
                            (global.get $tag-block))
     (then
      (i32.eq (call $get-block-value-type (local.get $value))
              (global.get $type-vector)))
     (else
      (i32.const 0))))

 (func $alloc-vector (export "alloc-vector")
   (param $length i32)
   (result i32)
   (call $alloc-block-value
         (global.get $type-vector)
         (local.get $length)))

 (func $dealloc-vector (export "dealloc-vector")
   (param $vector i32)
   (call $dealloc-block-value (local.get $vector)))

 (func $make-vector (export "make-vector")
   (param $length i32)
   (param $value i32)
   (result i32)

   (local $block i32)
   (local $idx i32)
   (local $v i32)

   (local.set $v (call $alloc-vector (local.get $length)))
   (local.set $block (call $get-block-))

   (loop $again
     (call $set-block-element (local.get $block) (local.get $idx) (local.get $value))
     (call $add-ref (local.get $v) (local.get $value))
     (if (i32.lt_u (local.get $idx) (local.get $length))
         (then
          (local.set (i32.add (local.get $idx) (i32.const 1)))
          (br $again))))

   (local.get $v))

 (func $vector (export "vector")
   (param $list i32)
   (local $idx i32)
   (local $v i32)
   (local $value i32)

   (local.set $v (call $alloc-vector (call $list-length (local.get $list))))
   (local.set $idx (i32.const 0))
   (loop $again
     (if (i32.ne (local.get $list) (global.get $null))
         (then
          (local.set $value (call $get-pair-car (local.get $list)))
          (call $set-block-element (local.get $block) (local.get $idx) (local.get $value))
          (call $add-ref (local.get $v) (local.get $value))
          (local.set $list (call $get-pair-cdr (local.get $list)))
          (br $again))))

   (local.get $v))


)
